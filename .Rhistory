}
above11<-function(x){
use<- x > 11
x[use]
}
above11<-function(x){
use<- x > 11
x[use]
}
y=c(12,11,13,4)
above11(y)
above<-function(x,n){
use<- x > n
x[use]
}
above(y,3)
above(y,12)
above<-function(x,n=10){
use<- x > n
x[use]
}
above(y)
columnmeans<- function (x){
nc <- ncols(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnmeans(airquality)
columnmeans<- function (x){
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnmeans(airquality)
columnmeans<- function (x){
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnmeans(airquality)
columnmeans<- function (x, removeNA=TRUE){
nc <- ncol(x)
means <- numeric(nc)
for (i in 1:nc){
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
columnmeans(airquality)
columnmeans(airquality, FALSE)
search()
help(unclass)
cube<- function(x,n){}
cube<- function(x,n){}
cube<- function(x,n){ x^3}
cube(3)
x<- 1:10
x
if(x>5){x<-0}
f<-function(x){
g<-function(y) {
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
y <- if(x < 3) {
NA
} else {
10
}
x<-5
y <- if(x < 3) {
NA
} else {
10
}
y
library("swirl")
ls()
rm(list=ls())
swirl()
my_vector<-1:20
my_vestor
my_vector
dim(my_vector)
length(my_vector)
dim(my_vecotr)<-c(4,5)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
matrix(1:20,4,5)
my_matrix2<-matrix(data = 1:20, nrow = 4, ncol =5)
identical(my_matrix, mymatrix2)
identical(my_matrix, my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
y
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
skip()
source("complete.R")
directory<-"specdata"
threshold<-500
complete_data<-complete(directory)
for (i in seq_along(complete_data[,1])) {
if i > threshold {
print(i)
}
#all_rows <- read.csv(full_names[[i]])
##//get the list of complete and incomplete rows
#good <-complete.cases(all_rows)
##//only select the complet rows
#complete_rows<-all_rows[good,]
##//add the number of complete rows to the list
#nods[[i]] <-nrow(complete_rows)
}
}
source("corr.R")
corr("specdata", 500)
source("corr.R")
corr("specdata", 500)
source("complete.R")
source("corr.R")
corr("specdata", 500)
source("complete.R")
complete("specdata")
directory <-"specdata"
complete_data<-complete(directory)
directory <-"specdata"
complete_data<-complete(directory)
for (i in seq_along(complete_data[,2])) {
#                if i > threshold {
#                        print(i)
#                }
#all_rows <- read.csv(full_names[[i]])
##//get the list of complete and incomplete rows
#good <-complete.cases(all_rows)
##//only select the complet rows
#complete_rows<-all_rows[good,]
##//add the number of complete rows to the list
#nods[[i]] <-nrow(complete_rows)
}
directory <-"specdata"
complete_data<-complete(directory)
for (i in seq_along(complete_data[,2])) {
#                if i > threshold {
print(i)
#                }
#all_rows <- read.csv(full_names[[i]])
##//get the list of complete and incomplete rows
#good <-complete.cases(all_rows)
##//only select the complet rows
#complete_rows<-all_rows[good,]
##//add the number of complete rows to the list
#nods[[i]] <-nrow(complete_rows)
}
directory <-"specdata"
complete_data<-complete(directory)
for (i in seq_along(complete_data[,3])) {
#                if i > threshold {
print(i)
#                }
#all_rows <- read.csv(full_names[[i]])
##//get the list of complete and incomplete rows
#good <-complete.cases(all_rows)
##//only select the complet rows
#complete_rows<-all_rows[good,]
##//add the number of complete rows to the list
#nods[[i]] <-nrow(complete_rows)
}
directory <-"specdata"
complete_data<-complete(directory)
for (i in seq_along(complete_data$nods)) {
#                if i > threshold {
print(i)
#                }
#all_rows <- read.csv(full_names[[i]])
##//get the list of complete and incomplete rows
#good <-complete.cases(all_rows)
##//only select the complet rows
#complete_rows<-all_rows[good,]
##//add the number of complete rows to the list
#nods[[i]] <-nrow(complete_rows)
}
?seq_along
directory <-"specdata"
complete_data<-complete(directory)
for (i in 1:nrows(complete_data) {
if complete_data[i,"nods"] > threshold {
print(complete_data[i,"nods"])
}
#all_rows <- read.csv(full_names[[i]])
##//get the list of complete and incomplete rows
#good <-complete.cases(all_rows)
##//only select the complet rows
#complete_rows<-all_rows[good,]
##//add the number of complete rows to the list
#nods[[i]] <-nrow(complete_rows)
}
directory <-"specdata"
complete_data<-complete(directory)
for (i in 1:nrows(complete_data) {
if complete_data[i,"nods"] > threshold {
print(complete_data[i,"nods"])
}
#all_rows <- read.csv(full_names[[i]])
##//get the list of complete and incomplete rows
#good <-complete.cases(all_rows)
##//only select the complet rows
#complete_rows<-all_rows[good,]
##//add the number of complete rows to the list
#nods[[i]] <-nrow(complete_rows)
}
directory <-"specdata"
complete_data<-complete(directory)
for (i in 1:nrows(complete_data)) {
if complete_data[i,"nods"] > threshold {
print(complete_data[i,"nods"])
}
#all_rows <- read.csv(full_names[[i]])
##//get the list of complete and incomplete rows
#good <-complete.cases(all_rows)
##//only select the complet rows
#complete_rows<-all_rows[good,]
##//add the number of complete rows to the list
#nods[[i]] <-nrow(complete_rows)
}
?nrows
?nrow
directory <-"specdata"
complete_data<-complete(directory)
for (i in 1:nrow(complete_data)) {
if complete_data[i,"nods"] > threshold {
print(complete_data[i,"nods"])
}
#all_rows <- read.csv(full_names[[i]])
##//get the list of complete and incomplete rows
#good <-complete.cases(all_rows)
##//only select the complet rows
#complete_rows<-all_rows[good,]
##//add the number of complete rows to the list
#nods[[i]] <-nrow(complete_rows)
}
directory <-"specdata"
complete_data<-complete(directory)
for (i in 1:nrow(complete_data)) {
#                if complete_data[i,"nods"] > threshold {
print(complete_data[i,"nods"])
#                }
#all_rows <- read.csv(full_names[[i]])
##//get the list of complete and incomplete rows
#good <-complete.cases(all_rows)
##//only select the complet rows
#complete_rows<-all_rows[good,]
##//add the number of complete rows to the list
#nods[[i]] <-nrow(complete_rows)
}
directory <-"specdata"
threshold <- 500
complete_data<-complete(directory)
for (i in 1:nrow(complete_data)) {
if complete_data[i,"nods"] > threshold {
print(complete_data[i,"nods"])
}
#all_rows <- read.csv(full_names[[i]])
##//get the list of complete and incomplete rows
#good <-complete.cases(all_rows)
##//only select the complet rows
#complete_rows<-all_rows[good,]
##//add the number of complete rows to the list
#nods[[i]] <-nrow(complete_rows)
}
directory <-"specdata"
threshold <- 500
complete_data<-complete(directory)
for (i in 1:nrow(complete_data)) {
if (complete_data[i,"nods"] > threshold) {
print(complete_data[i,"nods"])
}
#all_rows <- read.csv(full_names[[i]])
##//get the list of complete and incomplete rows
#good <-complete.cases(all_rows)
##//only select the complet rows
#complete_rows<-all_rows[good,]
##//add the number of complete rows to the list
#nods[[i]] <-nrow(complete_rows)
}
>cor
?cor
directory <-"specdata"
complete_data<-complete(directory)
source("complete.R")
complete("specdata")
source("complete.R")
source("corr.R")
cr<-corr("specdata",150)
source("corr.R")
cr<-corr("specdata",150)
source("complete.R")
complete("specdata",1:10)
source("complete.R")
complete("specdata",1:10)
?vector
source("complete.R")
complete("specdata",1:10)
source("complete.R")
complete("specdata",1:10)
source("complete.R")
complete("specdata",1:10)
source("complete.R")
complete("specdata",1:10)
source("complete.R")
complete("specdata",1:10)
source("corr.R")
corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
?as
source("corr.R")
corr("specdata", 150)
source("corr.R")
corr("specdata", 150)
source("complete.R")
corr("specdata", 150)
source("complete")
source("complete.R")
complete("specdata")
source("corr.R")
corr("specdata",150)
source("corr.R")
corr("specdata",150)
source("corr.R")
corr("specdata",150)
source("corr.R")
corr("specdata",150)
source("corr.R")
corr("specdata",150)
comp<-complete("specdata", 1:10)
head(comp)
?sprintf
?print
source("complete.R")
source("corr.R")
source("corr.R")
source("corr.R")
source("corr.R")
source("corr.R")
?switch
source("corr.R")
source("corr.R")
corr("specdata",150)
source("complete")
source("complete.R")
source("corr.R")
corr("specdata",150)
source("corr.R")
corr("specdata",150)
source("corr.R")
cr<-corr("specdata",150)
source("corr.R")
cr<-corr("specdata",150)
head(cr)
source("corr.R")
cr<-corr("specdata",150)
head(cr)
source("corr.R")
cr<-corr("specdata",150)
head(cr)
summary(cr)
cr<-corr("specdata")
summary(cr)
source("pollutantmean.R")
pollutantmean("specdata","sulfate",1:10)
complete("specdats",30:25)
complete("specdata",30:25)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
2
submit()
submit()
submit()
submit()
source("complete.R")
submit()
source("complete.R")
submit()
submit()
submit()
submit()
source("corr")
source("corr.R")
submit()
submit()
submit()
a<-list(a=1:5,b = rnorm(10))
a
library(datasets)
airquality
?gl
mean(x)
rm(list<-ls)
rm(x)
ls
list
mean(x)
traceback()
lm(y-x)
traceback()
lm(y~x)
traceback()
debug(lm)
lm(y~x)
library(datasets)
data(iris)
?iris
?mean
mean(iris$virginica)
mean(iris$virginica,na.rm=TRUE)
?iris
iris
factor(iris)
x<-iris[iris$species="virginica"]
x<-iris[species="virginica"]
x<-iris[Species="virginica"]
lapply(iris,mean)
x<-iris[iris$Species="virginica"]
x<-iris[iris$Species="virginica",]
x<-iris[iris$Species=="virginica",]
x
lapply(x,mean)
y<-apply(iris[,1:4],2,mean)
y
data(mtcars)
?mtcars
?with
?tapply
apply(mtcars,2,mean)
mean(mtcars$mpg,mtcars$cyl)
tapply(mtcars$cyl,mtcars$mpg,mean)
with(mtcars,tapply(mpg,cyl,mean))
?with
with(mtcars, tapply(mpg, cyl, mean))
?mtcars
x<-tapply(mtcars$hp,mtcars$cyl,mean)
x
?abs
abs(x[1]-x[3])
?function
}
help(function)
source("assignment2.R")
a<-makeVector(c(1,2,3,4))
a
aget$mean()
a$getmean()
a$set(c(4,5,6,7,8))
a$get()
a$getmean()
a$setmean()
a$setmean(12)
a$getmean()
ls
ls-l
ls(l)
?ls
ls()
list(ls())
list
list()
?list
getwd()
setwd("C:/Users/family/ProgrammingAssignment2")
getwd()
